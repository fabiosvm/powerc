
module          ::= decl* EOF

decl            ::= type_decl | var_decl | func_decl

type_decl       ::= "type" IDENT "=" type ";"

type            ::= "Bool" | "Byte" | "Int" | "UInt" | "Float" | "Rune" | "String"
                  | "fn" "(" ( param_type ( "," param_type )* )? ")" ( "->" type )?
                  | IDENT

var_decl        ::= "var" IDENT ":" type ( "=" expr )? ";"

func_decl       ::= "fn" IDENT func_body

func_body       ::= "(" ( param ( "," param )* )? ")" ( "->" type )? block

param           ::= IDENT ":" param_type

param_type      ::= "inout"? type

block           ::= "{" stmt* "}"

stmt            ::= type_decl
                  | var_decl
                  | func_decl
                  | block
                  | "if" expr block ( "else" block )?
                  | "loop" block
                  | "break" ";"
                  | "continue" ";"
                  | "return" expr? ";"
                  | expr ";"

expr            ::= or_expr ( "=" expr )?

or_expr         ::= and_expr ( "||" and_expr )*

and_expr        ::= eq_expr ( "&&" eq_expr )*

eq_expr         ::= comp_expr ( ( "==" | "!=" ) comp_expr )*

comp_expr       ::= add_expr ( ( "<" | "<=" | ">" | ">=" ) add_expr )*

add_expr        ::= mul_expr ( ( "+" | "-" ) mul_expr )*

mul_expr        ::= unary_expr ( ( "*" | "/" | "%" ) unary_expr )*

unary_expr      ::= ( "!" | "-" ) unary_expr | call_expr

call_expr       ::= prim_expr ( "(" ( expr ( "," expr )* )? ")" )*

prim_expr       ::= "false" | "true" | INT | FLOAT | RUNE | STRING
                  | "fn" func_body
                  | "&"? IDENT
                  | "(" expr ")"
