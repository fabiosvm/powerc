
module           ::= decl* EOF

decl             ::= import_decl
                   | typealias_decl
                   | func_decl
                   | struct_decl
                   | interface_decl
                   | const_decl

import_decl      ::= "import" STRING ( "as" IDENT )? ";"

typealias_decl   ::= "typealias" IDENT poly_params? "=" type ";"

poly_params      ::= "<" poly_param ( "," poly_param )* ">"

poly_param       ::= IDENT ( ":" type )?

type             ::= "fn" type "(" ( param_type ( "," param_type )* )? ")"
                   | IDENT ( "<" ( type ( "," type )* )? ">" )?

param_type       ::= "inout"? type

func_decl        ::= "fn" type IDENT params block

params           ::= "(" ( param ( "," param )* )? ")"

param            ::= param_type IDENT

block            ::= "{" stmt* "}"

struct_decl      ::= "struct" IDENT poly_params? "{" struct_member* "}"

struct_member    ::= type IDENT? ";"

interface_decl   ::= "interface" IDENT poly_params? "{" interface_member* "}"

interface_member ::= type ( IDENT params )? ";"

const_decl       ::= "const" IDENT "=" expr ";"

stmt             ::= typealias_decl
                   | func_decl
                   | struct_decl
                   | interface_decl
                   | const_decl
                   | var_decl
                   | block
                   | "if" expr block ( "else" block )?
                   | "switch" expr "{" case* default? "}"
                   | "while" expr block
                   | "do" block "while" expr ";"
                   | "for" IDENT "in" expr block
                   | "break" ";"
                   | "continue" ";"
                   | "return" expr? ";"
                   | expr ";"

var_decl         ::= "var" type IDENT ( "=" expr )? ";"

case             ::= "case" expr ":" stmt*

default          ::= "default" ":" stmt*

expr             ::= or_expr ( assign_op expr )?

assign_op        ::= "=" | "|=" | "^=" | "&=" | "<<=" | ">>=" 
                   | "+=" | "-=" | "*=" | "/=" | "%="

or_expr          ::= and_expr ( "||" and_expr )*

and_expr         ::= bor_expr ( "&&" bor_expr )*

bor_expr         ::= bxor_expr ( "|" bxor_expr )*

bxor_expr        ::= band_expr ( "^" band_expr )*

band_expr        ::= eq_expr ( "&" eq_expr )*

eq_expr          ::= comp_expr ( ( "==" | "!=" ) comp_expr )*

comp_expr        ::= shift_expr ( ( "<" | "<=" | ">" | ">=" ) shift_expr )*

shift_expr       ::= range_expr ( ( "<<" | ">>" ) range_expr )*

range_expr       ::= add_expr ( ".." add_expr )?

add_expr         ::= mul_expr ( ( "+" | "-" ) mul_expr )*

mul_expr         ::= unary_expr ( ( "*" | "/" | "%" ) unary_expr )*

unary_expr       ::= ( "!" | "-" | "~" ) unary_expr | prim_expr

prim_expr        ::= "void" | "false" | "true" | INT | FLOAT | CHAR | STRING
                   | "[" ( expr ( "," expr )* )? "]"
                   | "fn" type params block
                   | "new" type call
                   | "&" IDENT subscr*
                   | IDENT ( subscr | call )*
                   | "try" expr
                   | "if" expr "{" expr "}" "else" "{" expr "}"
                   | "(" expr ")"

call             ::= "(" ( expr ( "," expr )* )? ")"

subscr           ::= "[" expr "]" | "." IDENT
