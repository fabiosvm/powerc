
module          ::= decl* EOF

decl            ::= type_decl | var_decl | func_decl

type_decl       ::= "type" IDENT "=" type ";"

type            ::= "Bool" | "Byte" | "Int" | "UInt" | "Float" | "Rune" | "String"
                  | "fn" "(" ( param_type ( "," param_type )* )? ")" ( "->" type )?
                  | IDENT ( "<" type ( "," type )* ">" )?

param_type      ::= "inout"? type

var_decl        ::= "var" IDENT ":" type ( "=" expr )? ";"
                  | "let" IDENT ( ":" type )? "=" expr ";"

func_decl       ::= "fn" IDENT func_body

func_body       ::= "(" ( param ( "," param )* )? ")" ( "->" type )? block

param           ::= IDENT ":" param_type

block           ::= "{" stmt* "}"

stmt            ::= type_decl
                  | var_decl
                  | func_decl
                  | block
                  | "if" expr block ( "else" block )?
                  | "loop" block
                  | "while" expr block
                  | "do" block "while" expr ";"
                  | "for" IDENT "in" expr block
                  | "break" ";"
                  | "continue" ";"
                  | "return" expr? ";"
                  | expr ";"

expr            ::= or_expr ( assign_op expr )?

assign_op       ::= "=" | "|=" | "^=" | "&=" | "<<=" | ">>=" 
                  | "+=" | "-=" | "*=" | "/=" | "%="

or_expr         ::= and_expr ( "||" and_expr )*

and_expr        ::= eq_expr ( "&&" eq_expr )*

eq_expr         ::= comp_expr ( ( "==" | "!=" ) comp_expr )*

comp_expr       ::= bor_expr ( ( "<" | "<=" | ">" | ">=" ) bor_expr )*

bor_expr        ::= bxor_expr ( "|" bxor_expr )*

bxor_expr       ::= band_expr ( "^" band_expr )*

band_expr       ::= shift_expr ( "&" shift_expr )*

shift_expr      ::= range_expr ( ( "<<" | ">>" ) range_expr )*

range_expr      ::= add_expr ( ".." add_expr )?

add_expr        ::= mul_expr ( ( "+" | "-" ) mul_expr )*

mul_expr        ::= unary_expr ( ( "*" | "/" | "%" ) unary_expr )*

unary_expr      ::= ( "!" | "-" | "~" ) unary_expr | prim_expr

prim_expr       ::= "false" | "true" | INT | FLOAT | RUNE | STRING
                  | "[" ( expr ( "," expr )* )? "]"
                  | "fn" func_body
                  | "&" IDENT subscr*
                  | IDENT ( subscr | call )*
                  | "if" expr "{" expr "}" "else" "{" expr "}"
                  | "(" expr ")"

subscr          ::= "[" expr "]"

call            ::= "(" ( expr ( "," expr )* )? ")"
