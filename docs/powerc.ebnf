
module          ::= fn_decl* EOF

fn_decl         ::= "fn" IDENT "(" ( param ( "," param )* )? ")" type "{" stmt* "}"

param           ::= IDENT type

type            ::= "Void" | "Bool" | "Int" | "UInt" | "Float"

stmt            ::= "var" IDENT type ( "=" expr )? ";"
                  | IDENT "=" expr ";"
                  | "return" expr? ";"

expr            ::= and_expr ( "||" and_expr )*

and_expr        ::= eq_expr ( "&&" eq_expr )*

eq_expr         ::= comp_expr ( ( "==" | "!=" ) comp_expr )*

comp_expr       ::= add_expr ( ( "<" | "<=" | ">" | ">=" ) add_expr )*

add_expr        ::= mul_expr ( ( "+" | "-" ) mul_expr )*

mul_expr        ::= unary_expr ( ( "*" | "/" | "%" ) unary_expr )*

unary_expr      ::= ( "!" | "-" ) unary_expr | call_expr

call_expr       ::= prim_expr ( "(" ( expr ( "," expr )* )? ")" )*

prim_expr       ::= "false" | "true" | INT | FLOAT | IDENT | "(" expr ")"
