
// generics.pwc

interface Accountable<T: Number> {
  fn Void deposit(inout Self self, T amount);
  fn Void withdraw(inout Self self, T amount);
  fn T balance(Self self);
}

type Money<T> = Accountable<T>;

struct MoneyImpl<T: Number> {
  T balance;
}

fn Void init(inout MoneyImpl<T> self, T balance) {
  self.balance = balance;
}

fn Void deposit(inout MoneyImpl<T> self, T amount) {
  self.balance = self.balance + amount;
}

fn Void withdraw(inout MoneyImpl<T> self, T amount) {
  self.balance = self.balance - amount;
}

fn T balance(MoneyImpl<T> self) {
  return self.balance;
}

fn <T: Number> Accountable<T> new_money_accountable() {
  var MoneyImpl<Float> money = new MoneyImpl<>(0);
  return money;
}

fn Void main() {
  var Accountable<Float> account = new_money_accountable();
  account.deposit(1000);
  account.withdraw(50);
  println(account.balance()); // 950
}
