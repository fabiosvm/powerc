
// error.pwc

struct Result<T, E> {
  ?T ok;
  ?E error;
}

fn <T> Result<T, Null> ok(T value) {
  return new Result(value, null);
}

fn <E> Result<Null, E> error(E value) {
  return new Result(null, value);
}

fn Result<Double, String> divide(Double a, Double b) {
  if (b == 0) {
    return error("division by zero");
  }
  return ok(a / b);
}

fn Void ok_test() {
  let a = 10.0;
  let b = 2.0;
  let result = divide(a, b);
  assert(result.error == null);
  println(result.ok); // 5
}

fn Result<Double, String> ok_with_try_test() {
  let a = 10.0;
  let b = 2.0;
  let result = try divide(a, b);
  println(result); // 5
}

fn Void error_test() {
  let a = 10.0;
  let b = 0.0;
  let result = divide(a, b);
  assert(result.error != null);
  println(result.error); // division by zero
}

fn Result<Double, String> error_with_try_test() {
  let a = 10.0;
  let b = 0.0;
  let result = try divide(a, b); // Propagate error
  println(result);
}

fn Void main() {
  ok_test();
  ok_with_try_test();
  error_test();
  error_with_try_test();
}
