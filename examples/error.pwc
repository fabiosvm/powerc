
// error.pwc

struct Option<T> {
  Bool present;
  T value;
}

struct Result<T, E> {
  T ok;
  Option<E> err;
}

fn Void init(inout Result<T, E> self, T ok) {
  self.ok = ok;
}

fn Void init(inout Result<T, E> self, E err) {
  self.err = err;
}

fn Result<Double, String> divide(Double a, Double b) {
  if (b == 0) {
    return new Result<>("division by zero");
  }
  return new Result<>(a / b);
}

fn Void ok_test() {
  let a = 10.0;
  let b = 2.0;
  let result = divide(a, b);
  println(result.ok); // 5
  assert(!result.err.present);
}

fn Result<Double, String> ok_with_try_test() {
  let a = 10.0;
  let b = 2.0;
  let result = try divide(a, b);
  println(result); // 5
}

fn Void error_test() {
  let a = 10.0;
  let b = 0.0;
  let result = divide(a, b);
  assert(result.err.present);
  println(result.err); // division by zero
}

fn Result<Double, String> error_with_try_test() {
  let a = 10.0;
  let b = 0.0;
  let result = try divide(a, b); // Propagate error
  println(result);
}

fn Void main() {
  ok_test();
  ok_with_try_test();
  error_test();
  error_with_try_test();
}
